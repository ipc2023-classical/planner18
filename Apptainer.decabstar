# Stage 1: Compile the planner
Bootstrap: docker
From: ubuntu:kinetic
Stage: build

%files
    .
    $IPC_THIRD_PARTY/cplex_studio2211.linux_x86_64.bin cplex.bin

%post
    ## Install all dependencies.
    apt-get update
    apt-get -y install --no-install-recommends cmake make g++ pypy3 automake default-jre-headless zlib1g-dev

    ## Clear local build directories.
    rm -rf /builds

    ## Build CUDD
    cd third-party/cudd

    aclocal
    automake
    ./configure --enable-shared --enable-obj
    make
    make install

    export PATH="/third-party/cudd:$PATH"

    cd ../..

    ## Build CPLEX
    ./cplex.bin -DLICENSE_ACCEPTED=TRUE -i silent

    export DOWNWARD_CPLEX_ROOT=/opt/ibm/ILOG/CPLEX_Studio2211/cplex/
    export DOWNWARD_CPLEX_CONCERT64=/opt/ibm/ILOG/CPLEX_Studio2211/concert/

    ##Build OSI
    cd third-party/Osi-0.108.6
    export DOWNWARD_COIN_ROOT=/opt/coin/

    ./configure CC="gcc"  CFLAGS="-pthread -Wno-long-long" \
            CXX="g++" CXXFLAGS="-pthread -Wno-long-long" \
            LDFLAGS="-L$DOWNWARD_CPLEX_ROOT/lib/x86-64_linux/static_pic" \
            --without-lapack --enable-static=yes \
            --prefix="$DOWNWARD_COIN_ROOT" \
            --disable-bzlib  \
            --with-cplex-incdir=$DOWNWARD_CPLEX_ROOT/include/ilcplex \
            --with-cplex-lib="-lcplex -lm -ldl"

    make
    make install

    cd ../..


    ## Build planner.
    pypy3 build.py release64

    ## Strip binaries (shell globs don't work).
    strip --strip-all /builds/release64/bin/downward
    strip --strip-all /builds/release64/bin/preprocess-h2

# Stage 2: Run the planner
Bootstrap: docker
From: ubuntu:kinetic
Stage: run

%files from build
    fast-downward.py
    driver
    builds/release64/bin/
    third-party/cudd/
    /usr/local/lib/libcudd-3.0.0.so.0
    /opt/ibm/ILOG/CPLEX_Studio2211/cplex/
    /opt/ibm/ILOG/CPLEX_Studio2211/concert/
    /opt/coin/

%post
    apt-get update
    apt-get -y install --no-install-recommends pypy3
    apt-get clean
    rm -rf /var/lib/apt/lists/*

%runscript
    DOMAINFILE="$1"
    PROBLEMFILE="$2"
    PLANFILE="$3"

    pypy3 /fast-downward.py \
        --plan-file "$PLANFILE" \
        --build release64 \
        --alias "seq-opt-decabstar" \
        --overall-memory-limit 8000M \
        --overall-time-limit 30m \
        --transform-task /builds/release64/bin/preprocess-h2 \
        --transform-task-options h2_time_limit,240 \
        "$DOMAINFILE" "$PROBLEMFILE"

%labels
Name        DecAbStar
Description Optimal planner based on decoupled state-space search and abstraction heuristics.
Authors     Daniel Gnad <daniel.gnad@liu.se>, Silvan Sievers <silvan.sievers@unibas.ch>, Alvaro Torralba <alto@cs.aau.dk>
License     GPL 3
Tracks      optimal
SupportsDerivedPredicates                       no
SupportsUniversallyQuantifiedPreconditions      yes
SupportsExistentiallyQuantifiedPreconditions    partially, only quantification over static predicates
SupportsUniversallyQuantifiedEffects            yes
SupportsNegativePreconditions                   yes
SupportsEqualityPreconditions                   yes
SupportsInequalityPreconditions                 yes
SupportsConditionalEffects                      yes
SupportsImplyPreconditions                      yes
